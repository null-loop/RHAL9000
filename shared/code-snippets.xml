<TemplatesExport>
  <Template uid="ce600b73-4e8f-4d2a-89f9-24b6593df34b" shortcut="nunit-test" description="" text="[Test]&#xD;&#xA;public void $TEST$()&#xD;&#xA;{&#xD;&#xA;	throw new NotImplementedException(&quot;This test has not been implemented by.&quot;);&#xD;&#xA;	// arrange&#xD;&#xA;	// act&#xD;&#xA;	// assert&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="TEST" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="f73bc2cc-ad77-4720-ae7e-d5263afed7f7" shortcut="nunit-framework" description="" text="using System;&#xD;&#xA;using NUnit.Framework;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$ &#xD;&#xA;{ &#xD;&#xA;    // ReSharper disable InconsistentNaming&#xD;&#xA;&#xD;&#xA;    [TestFixture] &#xD;&#xA;    public class $TEST_FIXTURE_NAME$ &#xD;&#xA;    {        &#xD;&#xA;        /* &#xD;&#xA;         * remember - one test - test one thing&#xD;&#xA;		 *            arrange / act / assert&#xD;&#xA;		 *			  test code is first class code&#xD;&#xA;         */&#xD;&#xA;&#xD;&#xA;        [Test] &#xD;&#xA;        public void $FIRST_TEST_NAME$() &#xD;&#xA;        { &#xD;&#xA;			throw new NotImplementedException(&quot;This test has not been implemented.&quot;);&#xD;&#xA;			// arrange&#xD;&#xA;			// act&#xD;&#xA;			// assert&#xD;&#xA;        } &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;   // ReSharper restore InconsistentNaming &#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="-1" />
      <Variable name="TEST_FIXTURE_NAME" expression="" initialRange="0" />
      <Variable name="FIRST_TEST_NAME" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d05db788-6d73-4cdc-9c77-02e469ea4b3c" shortcut="nunit-test-source" description="" text="[Test]&#xD;&#xA;[TestCaseSource(&quot;$TEST$_TestCases&quot;)]&#xD;&#xA;public void $TEST$($TESTARGS$)&#xD;&#xA;{&#xD;&#xA;	throw new NotImplementedException(&quot;This test has not been implemented.&quot;);&#xD;&#xA;	// arrange&#xD;&#xA;	// act&#xD;&#xA;	// assert&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// tests cases for &#xD;&#xA;private static IEnumerable&lt;object[]&gt; $TEST$_TestCases()&#xD;&#xA;{&#xD;&#xA;	yield return new object[] { };&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="TEST" expression="" initialRange="0" />
      <Variable name="TESTARGS" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="63fd793d-1404-4906-8709-51b20f5a4393" shortcut="log4net-logger" description="" text="private static readonly log4net.ILog Logger = log4net.LogManager.GetLogger(typeof($CLASS$));" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="CLASS" expression="typeName()" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="ac04ec32-6da1-4c03-a380-e26dc1ffdfb9" shortcut="structuremap-registry" description="" text="public class $REGISTRY_NAME$Registry : StructureMap.Configuration.DSL.Registry&#xD;&#xA;{&#xD;&#xA;	public $REGISTRY_NAME$Registry()&#xD;&#xA;	{&#xD;&#xA;		For&lt;$ABSTRACT_TYPE$&gt;().Use&lt;$CONCRETE_TYPE$&gt;();&#xD;&#xA;	}&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="REGISTRY_NAME" expression="" initialRange="0" />
      <Variable name="ABSTRACT_TYPE" expression="complete()" initialRange="0" />
      <Variable name="CONCRETE_TYPE" expression="complete()" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="f14c9b9e-5822-4188-b953-ae7f66d96e7c" shortcut="rhino-strict-framework" description="" text="// arrange&#xD;&#xA;&#xD;&#xA;var mocks = new Rhino.Mocks.MockRepository();&#xD;&#xA;var $MOCK_NAME$ = mocks.StrictMock&lt;$MOCK_TYPE$&gt;();&#xD;&#xA;&#xD;&#xA;using (mocks.Record())&#xD;&#xA;{&#xD;&#xA;	// set expectations&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;using (mocks.Playback())&#xD;&#xA;{&#xD;&#xA;	// act&#xD;&#xA;	// assert&#xD;&#xA;	// remember that expectations are evaluated on playback dispose&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="MOCK_NAME" expression="" initialRange="0" />
      <Variable name="MOCK_TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
</TemplatesExport>